name: Build and Test

on:
  pull_request:
  push:
    branches: [main, develop]

env:
  DOTNET_VERSION: '8.0.x' # The .NET SDK version to use

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dependencies
        run: dotnet restore SmartHome/SmartHome.sln

      - name: Run build
        run: dotnet build SmartHome/SmartHome.sln --configuration Release


  test:
    name: Test
    permissions: write-all
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install Dependencies
        run: dotnet restore SmartHome/SmartHome.sln

      - name: Run Build
        run: dotnet build SmartHome/SmartHome.sln --configuration Release

      - name: Generate Test Results
        run: dotnet test SmartHome/SmartHome.sln --configuration Release --no-build --verbosity normal --logger "trx;LogFilePrefix=test-results" --results-directory ./coverage


      - name: Uploaded Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Uploaded Test Results
          path: coverage/test-results*
          reporter: dotnet-trx
          path-replace-backslashes: false
          list-suites: all
          list-tests: all
          max-annotations: 10
          fail-on-error: true
          fail-on-empty: true
          only-summary: false

      - name: Generate Test Coverage
        run: dotnet test SmartHome/SmartHome.sln --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage --settings .runsettings

      - name: Join Coverage Reports
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.9
        with:
          reports: coverage/**/coverage.cobertura.xml
          targetdir: coverage
          reporttypes: 'Cobertura'

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage/*.xml

          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '85 90'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request' && always()
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Write to Job Summary
        if: always()
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      - name: Build Tag
        if: github.event_name == 'push'
        run: |
          # find the highest-numbered version tag, bump the patch
          # version, and push that as a new tag.
          #
          # if the patch version was omitted, restart numbering there.
          #
          # example:
          #   3.1.0 yields 3.1.1
          #   3.2 yields 3.2.0
          #   <no tags> yields 0.0.1
          #   abc-1.2.9 yields abc-1.2.10

          git fetch --tags origin
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

          GIT_TAGS=$(git tag | egrep '^[0-9]+\.[0-9]+(\.[0-9]+)?$' || true)

          if [ -z "$GIT_TAGS" ]; then
            LATEST="0.0.0"
          else
            LATEST=$(
              git tag --list |
              egrep '^[0-9]+\.[0-9]+(\.[0-9]+)?$' |
              sort -V |
              tail -n 1
            )
          fi

           if echo $LATEST | egrep '^[0-9]+\.[0-9]+$'; then
            BUMPED="${LATEST}.0"
          else
            BUMPED=$(echo $LATEST | awk -F. '{ print $1 "." $2 "." ($3 + 1) }')
          fi

          echo "bumping ${LATEST} to ${BUMPED}"

          git tag --annotate "$BUMPED" --message "via GitHub Actions"
          git push origin "$BUMPED"

